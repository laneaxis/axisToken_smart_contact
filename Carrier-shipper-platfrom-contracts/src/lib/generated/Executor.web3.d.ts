/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LoadPriceUpdated = ContractEventLog<{
  newPrice: string;
  0: string;
}>;
export type LoadsPurchased = ContractEventLog<{
  buyer: string;
  loadsAmount: string;
  sUsdcAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnerAdded = ContractEventLog<{
  newOwner: string;
  0: string;
}>;
export type OwnerRemoved = ContractEventLog<{
  previousOwner: string;
  0: string;
}>;

export interface Executor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Executor;
  clone(): Executor;
  methods: {
    _axisToken(): NonPayableTransactionObject<string>;

    _ethToken(): NonPayableTransactionObject<string>;

    _sUsdcToken(): NonPayableTransactionObject<string>;

    _uniswapQuoter(): NonPayableTransactionObject<string>;

    _uniswapRouter(): NonPayableTransactionObject<string>;

    _usdcToken(): NonPayableTransactionObject<string>;

    addOwners(newOwners: string[]): NonPayableTransactionObject<boolean>;

    buyLoadsFactor(): NonPayableTransactionObject<string>;

    owners(): NonPayableTransactionObject<string[]>;

    ownersCount(): NonPayableTransactionObject<string>;

    removeOwners(
      previousOwners: string[]
    ): NonPayableTransactionObject<boolean>;

    swapFee(): NonPayableTransactionObject<string>;

    swapSqrtPriceLimitX96(): NonPayableTransactionObject<string>;

    isPaymentHandled(
      id: string | number[]
    ): NonPayableTransactionObject<boolean>;

    isPayoutHandled(
      id: string | number[]
    ): NonPayableTransactionObject<boolean>;

    priceInput(
      tokenIn: string,
      tokenOut: string,
      fee: number | string | BN,
      amountIn: number | string | BN,
      sqrtPriceLimitX96: number | string | BN
    ): NonPayableTransactionObject<string>;

    priceOutput(
      tokenIn: string,
      tokenOut: string,
      fee: number | string | BN,
      amountOut: number | string | BN,
      sqrtPriceLimitX96: number | string | BN
    ): NonPayableTransactionObject<string>;

    getLoadPrice(): NonPayableTransactionObject<string>;

    handlePayment(
      id: string | number[],
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    handlePayout(
      id: string | number[],
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    swapSUSDCToEth(
      account: string,
      amountOut: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapSUSDCToAXIS(
      account: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapAXISToSUSDC(
      account: string,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    payOrder(
      payer: string,
      order: string,
      sUsdcAmount: number | string | BN,
      axisAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    buyLoads(
      account: string,
      loadsAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    setLoadPrice(
      newPrice: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    LoadPriceUpdated(cb?: Callback<LoadPriceUpdated>): EventEmitter;
    LoadPriceUpdated(
      options?: EventOptions,
      cb?: Callback<LoadPriceUpdated>
    ): EventEmitter;

    LoadsPurchased(cb?: Callback<LoadsPurchased>): EventEmitter;
    LoadsPurchased(
      options?: EventOptions,
      cb?: Callback<LoadsPurchased>
    ): EventEmitter;

    OwnerAdded(cb?: Callback<OwnerAdded>): EventEmitter;
    OwnerAdded(options?: EventOptions, cb?: Callback<OwnerAdded>): EventEmitter;

    OwnerRemoved(cb?: Callback<OwnerRemoved>): EventEmitter;
    OwnerRemoved(
      options?: EventOptions,
      cb?: Callback<OwnerRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LoadPriceUpdated", cb: Callback<LoadPriceUpdated>): void;
  once(
    event: "LoadPriceUpdated",
    options: EventOptions,
    cb: Callback<LoadPriceUpdated>
  ): void;

  once(event: "LoadsPurchased", cb: Callback<LoadsPurchased>): void;
  once(
    event: "LoadsPurchased",
    options: EventOptions,
    cb: Callback<LoadsPurchased>
  ): void;

  once(event: "OwnerAdded", cb: Callback<OwnerAdded>): void;
  once(
    event: "OwnerAdded",
    options: EventOptions,
    cb: Callback<OwnerAdded>
  ): void;

  once(event: "OwnerRemoved", cb: Callback<OwnerRemoved>): void;
  once(
    event: "OwnerRemoved",
    options: EventOptions,
    cb: Callback<OwnerRemoved>
  ): void;
}
