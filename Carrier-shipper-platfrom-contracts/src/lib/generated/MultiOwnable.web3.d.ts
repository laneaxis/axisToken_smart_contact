/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnerAdded = ContractEventLog<{
  newOwner: string;
  0: string;
}>;
export type OwnerRemoved = ContractEventLog<{
  previousOwner: string;
  0: string;
}>;

export interface MultiOwnable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MultiOwnable;
  clone(): MultiOwnable;
  methods: {
    owners(): NonPayableTransactionObject<string[]>;

    ownersCount(): NonPayableTransactionObject<string>;

    addOwners(newOwners: string[]): NonPayableTransactionObject<boolean>;

    removeOwners(
      previousOwners: string[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    OwnerAdded(cb?: Callback<OwnerAdded>): EventEmitter;
    OwnerAdded(options?: EventOptions, cb?: Callback<OwnerAdded>): EventEmitter;

    OwnerRemoved(cb?: Callback<OwnerRemoved>): EventEmitter;
    OwnerRemoved(
      options?: EventOptions,
      cb?: Callback<OwnerRemoved>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnerAdded", cb: Callback<OwnerAdded>): void;
  once(
    event: "OwnerAdded",
    options: EventOptions,
    cb: Callback<OwnerAdded>
  ): void;

  once(event: "OwnerRemoved", cb: Callback<OwnerRemoved>): void;
  once(
    event: "OwnerRemoved",
    options: EventOptions,
    cb: Callback<OwnerRemoved>
  ): void;
}
