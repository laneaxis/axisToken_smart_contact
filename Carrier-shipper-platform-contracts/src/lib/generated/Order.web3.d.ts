/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OrderDistributed = ContractEventLog<{
  id: string;
  shipper: string;
  carrier: string;
  shipperAmount: string;
  carrierAmount: string;
  paymentFeeAmount: string;
  feeAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;

export interface Order extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Order;
  clone(): Order;
  methods: {};
  events: {
    OrderDistributed(cb?: Callback<OrderDistributed>): EventEmitter;
    OrderDistributed(
      options?: EventOptions,
      cb?: Callback<OrderDistributed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OrderDistributed", cb: Callback<OrderDistributed>): void;
  once(
    event: "OrderDistributed",
    options: EventOptions,
    cb: Callback<OrderDistributed>
  ): void;
}
